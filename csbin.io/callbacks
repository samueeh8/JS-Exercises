// Challenge 1
function addTwo(num) {
  
  const output = num + 2;
  
  return output;

}

// To check if you've completed it, uncomment these console.logs!
// console.log(addTwo(3));
// console.log(addTwo(10));


// Challenge 2
function addS(word) {
  
  const output = word + "s";
  
  return output;

}

// uncomment these to check your work
// console.log(addS('pizza'));
// console.log(addS('bagel'));


// Challenge 3
function map(array, callback) {
  
  const output = [];
  
  for ( let i = 0; i < array.length; i++ ) {
    const newNum = callback(array[i]);
    
    output.push(newNum);
  }
  
  return output;

}

// console.log(map([1, 2, 3], addTwo));
// console.log(map([4, 8, 12], addTwo));
// console.log(map(["word", "bagel", "ball"], addS));


// Challenge 4
function forEach(array, callback) {
  
	for (let i = 0; i < array.length; i++) {
    callback(array[i]);
  }
																					//HELP!!
}
  
let alphabet = '';
const letters = ['a', 'b', 'c', 'd'];
  
forEach(letters, function(letter) {
  alphabet += letter;
});
  
// console.log(alphabet);   // debe imprimir 'abcd'



// see for yourself if your forEach works!


// Challenge 5
function mapWith(array, callback) {
  
  const output = [];

  array.forEach( (element) => output.push( callback( element ) ) );

  return output;
  
  // return forEach(array, callback);			// ????????????
}

// console.log(mapWith(["word", "bagel", "ball"], addS));
// console.log(mapWith([1, 2, 3], addTwo));


// Challenge 6

const add = (a, b) => a + b;

const by = (a, b) => a * b;

function reduce(array, callback, initialValue) {
  
  let output = initialValue;
  
  array.forEach( (element) => output = callback(output, element) );
  
  return output;

}

// console.log(reduce([4, 1, 3], add, 0));
// console.log(reduce([4, 1, 3], by, 1));


// Challenge 7
function intersection(arrays) {
  
  return arrays.reduce((acc, curr) => {
    return curr.filter((el) => acc.includes(el));
  });

}

// console.log(intersection([[5, 10, 15, 20], [15, 88, 1, 5, 7], [1, 10, 15, 5, 20]]));
// should log: [5, 15]


// Challenge 8
function union(arrays) {
  
  let output = new Set();
  
  arrays.forEach( (array) => {
    
    array.forEach( (element) => output.add(element) );
  });
  
  return Array.from(output);
  
  
  // return arrays.reduce((acc, curr) => {
  //   const elements = curr.filter(el => !acc.includes(el));			// no la veo clara
  //   return acc.concat(elements);
  // });

}

// console.log(union([[5, 10, 15], [15, 88, 1, 5, 7], [100, 15, 10, 1, 5]]));
// should log: [5, 10, 15, 88, 1, 7, 100]


// Challenge 9
function objOfMatches(array1, array2, callback) {  
  
  const match = {};
  
  // array1.forEach( (element, index) => { 				// como controla el index?
  //   if (callback(element) === array2[index]) {
  //     match[element] = array2[index];
  //   }
  // });
  
  
  for (let i=0; i<array1.length; i++) {
    if (callback(array1[i]) === array2[i]) {
      match[array1[i]] = array2[i];
    }
  }
  
  return match;

}

// console.log(objOfMatches(['hi', 'howdy', 'bye', 'later', 'hello'], ['HI', 'Howdy', 'BYE', 'LATER', 'hello'], function(str) { return str.toUpperCase(); }));
// should log: { hi: 'HI', bye: 'BYE', later: 'LATER' }


// Challenge 10
function multiMap(arrVals, arrCallbacks) {
  const obj = {};
  for (let i=0; i<arrVals.length; i++) {
    obj[arrVals[i]] = [];
    for (let j = 0; j < arrCallbacks.length; j++) {
      obj[arrVals[i]].push(arrCallbacks[j](arrVals[i]));      // esta linea
    }
  }
  return obj;
}

// console.log(multiMap(['catfood', 'glue', 'beer'], [function(str) { return str.toUpperCase(); }, function(str) { return str[0].toUpperCase() + str.slice(1).toLowerCase(); }, function(str) { return str + str; }]));
// should log: { catfood: ['CATFOOD', 'Catfood', 'catfoodcatfood'], glue: ['GLUE', 'Glue', 'glueglue'], beer: ['BEER', 'Beer', 'beerbeer'] }


// Challenge 11
function objectFilter(obj, callback) {
  const newObj = {};
  for (let key in obj) {
    if (callback(key) === obj[key]) {
      newObj[key] = callback(key);
    }
  }
  return newObj;
}

const cities = {
London: 'LONDON',
LA: 'Los Angeles',
Paris: 'PARIS',
};
// console.log(objectFilter(cities, city => city.toUpperCase())) // Should log { London: 'LONDON', Paris: 'PARIS'}


// Challenge 12
function majority(array, callback) {
  let countTrue = 0;
  let countFalse = 0;
  for (let i = 0; i < array.length; i++) {
    callback(array[i]) ? countTrue++ : countFalse++;
  }

  return countTrue > countFalse;
}

/*** Uncomment these to check your work! ***/
const impar = function(num) { return num % 2 === 1; };
// console.log(majority([1, 2, 3, 4, 5], impar)); // should log: true
// console.log(majority([2, 3, 4, 5], impar)); // should log: false


// Challenge 13
function prioritize(array, callback) {
  
  const output = [];
  
  array.forEach( (element) => {
    if (callback(element)) {
      output.unshift(element);
    } else {
      output.push(element);
    }
  });
  return output;
}


// /*** Uncomment these to check your work! ***/
const startsWithS = function(str) { return str[0] === 's' || str[0] === 'S'; };
// console.log(prioritize(['curb', 'rickandmorty', 'seinfeld', 'sunny', 'friends'], startsWithS)); // should log:
// ['seinfeld', 'sunny', 'curb', 'rickandmorty', 'friends']


// Challenge 14
function countBy(array, callback) {
  let result = {};
  let odd = 0;
  let even = 0;
  for (let num of array) {
    let key = callback(num);
    key === "odd" ? (result[key] = ++odd) : (result[key] = ++even);		// [key]
  }
  return result;
}


// /*** Uncomment these to check your work! ***/
// console.log(countBy([1, 2, 3, 4, 5], function(num) {
// if (num % 2 === 0) return 'even';
// else return 'odd';
// })); // should log: { odd: 3, even: 2 }


// Challenge 15
function groupBy(array, callback) {
  const result = {};
  for (let i of array) {
    let decimal = callback(i);
    if (decimal in result) {			// help
      result[decimal].push(i);
    } else {
      result[decimal] = [i];
    }
  }
  return result;
}

// /*** Uncomment these to check your work! ***/
// const decimals = [1.3, 2.1, 2.4];
// const floored = function(num) { return Math.floor(num); };
// console.log(groupBy(decimals, floored)); // should log: { 1: [1.3], 2: [2.1, 2.4] }


// Challenge 16
function goodKeys(obj, callback) {
  const result = [];
  for (let key in obj) {
    if (callback(obj[key])) {
      result.push(key);
    }
  }
  return result;
}

// /*** Uncomment these to check your work! ***/
// const sunny = { mac: 'priest', dennis: 'calculating', charlie: 'birdlaw', dee: 'bird', frank: 'warthog' };
// const startsWithBird = function(str) { return str.slice(0, 4).toLowerCase() === 'bird'; };
// console.log(goodKeys(sunny, startsWithBird)); // should log: ['charlie', 'dee']
